/**
 * @file src/program/game/Game.hpp
 * @author Adam 'Adanos' GÄ…sior
 * Used library: SFML 2.3.2
 */

#ifndef GAME_HPP
#define GAME_HPP

#include <vector>

#include "ui/ALL.hpp"
#include "entity/ALL.hpp"
#include "level/Level.hpp"
#include "../messages/MessageManager.hpp"

namespace rr {

    class MainMenu;
    class PauseMenu;
    class Attributes;
    class Inventory;
    class Journal;
    class BookOfSpells;
    class HUD;

    class Level;
    class FOV;
    class MessageManager;

    class Player;

    class Bar;
    class Slot;
    class Text;

    class Game {
    private: sf::View       gameView_;
             sf::View       mapView_;

             Level*         currentLevel_;

             MessageManager messageManager_;

             Player         player_;

             Attributes     attributes_;
             BookOfSpells   bookOfSpells_;
             DeathScreen    deathScreen_;
             Inventory      inventory_;
             Journal        journal_;
             HUD            hud_;
             MainMenu       mainMenu_;
             PauseMenu      pauseMenu_;

             bool           started_;
             bool           paused_;
             bool           mapOpen_;

             bool           lost_;

             unsigned       levelNumber_;
             unsigned       seed_;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Keyboard controls.
             ////////////////////////////////////////////////////////////////////////
             void controls(sf::Event&);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Randomizes the disposable items' colors/symbols.
             ////////////////////////////////////////////////////////////////////////
             void randomizeItems();

    public:  ////////////////////////////////////////////////////////////////////////
             /// \brief Regular constructor.
             ////////////////////////////////////////////////////////////////////////
             Game();

             ////////////////////////////////////////////////////////////////////////
             /// \brief Destructor.
             ////////////////////////////////////////////////////////////////////////
            ~Game();

             ////////////////////////////////////////////////////////////////////////
             /// \brief Draws the game components.
             ////////////////////////////////////////////////////////////////////////
             void draw(sf::RenderWindow&);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Handles the button events.
             ////////////////////////////////////////////////////////////////////////
             void buttonEvents(sf::RenderWindow&, sf::Event&);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Draws the game components.
             ////////////////////////////////////////////////////////////////////////
             void update(sf::Event&, sf::Time);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Switches to the level of a given index.
             ////////////////////////////////////////////////////////////////////////
             void switchLevel(int index);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Starts the game or not, depending on the argument's value.
             ////////////////////////////////////////////////////////////////////////
             void start(bool);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Pauses the game or not, depending on the argument's value.
             ////////////////////////////////////////////////////////////////////////
             void pause(bool);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Saves the game progress.
             ////////////////////////////////////////////////////////////////////////
             void save();

             ////////////////////////////////////////////////////////////////////////
             /// \brief Loads the game progress.
             ////////////////////////////////////////////////////////////////////////
             bool load();

             ////////////////////////////////////////////////////////////////////////
             /// \brief Starts the new game.
             ////////////////////////////////////////////////////////////////////////
             bool loadNewGame();

             ////////////////////////////////////////////////////////////////////////
             /// \brief Called after the player loses the game.
             ////////////////////////////////////////////////////////////////////////
             void lose();

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the game is started.
             ////////////////////////////////////////////////////////////////////////
             bool isStarted() { return started_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the game is paused.
             ////////////////////////////////////////////////////////////////////////
             bool isPaused() { return paused_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the game is lost.
             ////////////////////////////////////////////////////////////////////////
             bool isLost() { return lost_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the pointer to the player.
             ////////////////////////////////////////////////////////////////////////
             Player* getPlayer() { return &player_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the inventory.
             ////////////////////////////////////////////////////////////////////////
             Inventory* getInventory() { return &inventory_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the vector of game levels.
             ////////////////////////////////////////////////////////////////////////
             Level* getCurrentLevel() { return currentLevel_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the vector of game levels.
             ////////////////////////////////////////////////////////////////////////
             MessageManager* getMessageManager() { return &messageManager_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Resets the game state.
             ////////////////////////////////////////////////////////////////////////
             void reset();
    };

}

#endif // GAME_HPP
