/**
 * @file src/program/game/entity/Door.hpp
 * @author Adam 'Adanos' GÄ…sior
 * Used library: SFML 2.3.2
 */

#ifndef ENTITY_DOOR_HPP
#define ENTITY_DOOR_HPP

#include "Entity.hpp"

namespace rr
{

    class Door : public Entity
    {
    private: sf::Sprite body_;
             bool       locked_;
             bool       open_;
             bool       withoutWindow_;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Initializes the door.
             ////////////////////////////////////////////////////////////////////////
     virtual void initialize() override;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Draws the door's body and texture on the screen.
             ////////////////////////////////////////////////////////////////////////
     virtual void draw(sf::RenderTarget&, sf::RenderStates) const override;

    public:  ////////////////////////////////////////////////////////////////////////
             /// \brief Regular constructor.
             ////////////////////////////////////////////////////////////////////////
             Door(bool lock = false);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Copy constructor.
             ////////////////////////////////////////////////////////////////////////
             Door(Door const&);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Creates an exact copy of the door.
             ////////////////////////////////////////////////////////////////////////
     virtual Entity* clone() const override { return new Door(*this); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Makes the door open.
             ////////////////////////////////////////////////////////////////////////
             void setOpen(bool);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the door is open.
             ////////////////////////////////////////////////////////////////////////
             bool isOpen() const { return open_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the door is locked.
             ////////////////////////////////////////////////////////////////////////
             bool isLocked() const { return locked_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the door has no window.
             ////////////////////////////////////////////////////////////////////////
             bool isWithoutWindow() const { return withoutWindow_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the door's position relatively to the grid marked out
             /// by the level's tile map.
             ////////////////////////////////////////////////////////////////////////
     virtual void setGridPosition(sf::Vector2i pos) override { body_.setPosition((sf::Vector2f)pos*80.f); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the door's position relatively to the grid marked
             /// out by the level's tile map.
             ////////////////////////////////////////////////////////////////////////
     virtual sf::Vector2i getGridPosition() const override { return (sf::Vector2i) body_.getPosition()/80; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the door's position relatively to the graphics card's
             /// coordinate system.
             ////////////////////////////////////////////////////////////////////////
     virtual void setPosition(sf::Vector2f pos) override { body_.setPosition(pos); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the door's position relatively to the graphics
             /// card's coordinate system.
             ////////////////////////////////////////////////////////////////////////
     virtual sf::Vector2f getPosition() const override { return body_.getPosition(); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if another entity's bound box intersects with the
             /// door's bound box.
             ////////////////////////////////////////////////////////////////////////
     virtual bool collides(Entity* e) const override { return e->getBounds().intersects(getBounds()); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the door's bound box.
             ////////////////////////////////////////////////////////////////////////
     virtual sf::FloatRect getBounds() const override { return body_.getGlobalBounds(); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Reads the door from the file.
             ////////////////////////////////////////////////////////////////////////
     virtual std::ifstream& operator<<(std::ifstream&) override;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Saves the door to the file.
             ////////////////////////////////////////////////////////////////////////
     virtual std::ofstream& operator>>(std::ofstream&) override;
    };

}

#endif // ENTITY_DOOR_HPP
