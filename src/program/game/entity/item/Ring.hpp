/**
 * @file src/program/game/item/Ring.hpp
 * @author Adam 'Adanos' GÄ…sior
 * Used library: SFML
 */

#pragma once

#include "../Item.hpp"

namespace rr
{

    class Ring : public Equipable
    {
    private:
        static bool m_identified[7];
        ////////////////////////////////////////////////////////////////////////
        /// \brief Initializes the ring.
        ////////////////////////////////////////////////////////////////////////
        virtual void initialize() override;
    public:
        enum Type
        {
            HEALTH,
            MAGIC,
            STRENGTH,
            DEXTERITY,
            ACCURACY,
            SPEED,

            QUEST_SWORDSMAN,
            QUEST_SHARPSHOOTER,
            QUEST_CARPENTER,
            QUEST_MAGE,
            QUEST_KUNG_FU_MASTER
        };

        ////////////////////////////////////////////////////////////////////////
        /// Constructor.
        ////////////////////////////////////////////////////////////////////////
        Ring(Type = HEALTH, int bonus = 0, int amount = 0);

        ////////////////////////////////////////////////////////////////////////
        /// Copy constructor.
        ////////////////////////////////////////////////////////////////////////
        Ring(Ring const&);

        ////////////////////////////////////////////////////////////////////////
        /// \brief Creates an exact copy of the ring.
        ////////////////////////////////////////////////////////////////////////
        virtual Entity* clone() const override { return new Ring(*this); }

        ////////////////////////////////////////////////////////////////////////
        /// \brief Reveals the ring's properties.
        ////////////////////////////////////////////////////////////////////////
        virtual void reveal() override { m_identified[m_type] = true; }

        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the ring is discovered.
        ////////////////////////////////////////////////////////////////////////
        virtual bool isDiscovered() const override { return m_identified[m_type]; }

        ////////////////////////////////////////////////////////////////////////
        /// \brief Makes the ring equipped.
        ////////////////////////////////////////////////////////////////////////
        virtual void equip(bool b) override { m_equipped = b; }

        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the weapon is equipped.
        ////////////////////////////////////////////////////////////////////////
        virtual bool isEquipped() const override { return m_equipped; }

        ////////////////////////////////////////////////////////////////////////
        /// \brief Sets the ring's bonus.
        ////////////////////////////////////////////////////////////////////////
        void setBonus(float t) { m_bonus = t; }

        ////////////////////////////////////////////////////////////////////////
        /// \brief Returns the ring's bonus.
        ////////////////////////////////////////////////////////////////////////
        float getBonus() const { return m_bonus; }

        ////////////////////////////////////////////////////////////////////////
        /// \brief Sets the ring's type.
        ////////////////////////////////////////////////////////////////////////
        void setType(Type t) { m_type = t; }

        ////////////////////////////////////////////////////////////////////////
        /// \brief Returns the ring's type.
        ////////////////////////////////////////////////////////////////////////
        Type getType() const { return m_type; }

        ////////////////////////////////////////////////////////////////////////
        /// \brief Returns the ring's name.
        ////////////////////////////////////////////////////////////////////////
        virtual sf::String getName() const override;

        ////////////////////////////////////////////////////////////////////////
        /// \brief Returns the ring's description.
        ////////////////////////////////////////////////////////////////////////
        virtual sf::String getDescription() const override;

        ////////////////////////////////////////////////////////////////////////
        /// \brief Increases the ring's level and bonus.
        ////////////////////////////////////////////////////////////////////////
        void enhance();

        ////////////////////////////////////////////////////////////////////////
        /// \brief Reads the ring from the file.
        ////////////////////////////////////////////////////////////////////////
        virtual std::ifstream& operator<< (std::ifstream&) override;

        ////////////////////////////////////////////////////////////////////////
        /// \brief Saves the ring to the file.
        ////////////////////////////////////////////////////////////////////////
        virtual std::ofstream& operator>> (std::ofstream&) override;

    private:
        Type m_type;
        int  m_bonus;
    };

}
