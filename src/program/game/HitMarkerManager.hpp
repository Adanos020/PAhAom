/**
 * @file src/program/game/HitMarkerManager.hpp
 * @author Adam 'Adanos' GÄ…sior
 * Used library: SFML
 */

#ifndef HITMARKER_HPP
#define HITMARKER_HPP

#include <SFML/Graphics.hpp>

#include "../Observer.hpp"
#include "Entity.hpp"

namespace rr
{

    class Player;

    class HitMarker : public sf::Drawable
    {
    private:
        sf::Text m_text;
        sf::Time m_timeElapsed;
        sf::Time m_lifeTime;

        ////////////////////////////////////////////////////////////////////////
        /// \brief Draws the hitmarker to the target.
        ////////////////////////////////////////////////////////////////////////
        void draw(sf::RenderTarget&, sf::RenderStates) const;

    public:
        ////////////////////////////////////////////////////////////////////////
        /// \brief Regular constructor.
        ////////////////////////////////////////////////////////////////////////
        HitMarker(sf::String, sf::Color, sf::Vector2f position);

        ////////////////////////////////////////////////////////////////////////
        /// \brief Updates the hitmarker's state.
        ////////////////////////////////////////////////////////////////////////
        void update(sf::Time&);

        ////////////////////////////////////////////////////////////////////////
        /// \brief Tells if the hitmarker should be deleted.
        ////////////////////////////////////////////////////////////////////////
        bool isDead() const { return m_timeElapsed > m_lifeTime; }
    };

    class HitMarkerManager : public Observer
    {
    private:
        std::vector <HitMarker> m_hitmarkers;
        Player* m_player;

        ////////////////////////////////////////////////////////////////////////
        /// \brief Reacts to a specific event. It can either do something with
        /// a given entity or just ignore it.
        ////////////////////////////////////////////////////////////////////////
        virtual void onNotify(Event, Entity*, sf::String) override;

    public:
        ////////////////////////////////////////////////////////////////////////
        /// \brief Regular constructor.
        ////////////////////////////////////////////////////////////////////////
        HitMarkerManager(Player*);

        ////////////////////////////////////////////////////////////////////////
        /// \brief Adds a new hitmarker marker to the list.
        ////////////////////////////////////////////////////////////////////////
        void add(sf::String, sf::Color, sf::Vector2f position);

        ////////////////////////////////////////////////////////////////////////
        /// \brief Updates the state of the hitmarker markers.
        ////////////////////////////////////////////////////////////////////////
        void update(sf::Time&);

        ////////////////////////////////////////////////////////////////////////
        /// \brief Draws the hitmarkers to the window.
        ////////////////////////////////////////////////////////////////////////
        void draw(sf::RenderWindow&);
    };

}

#include "entity/Player.hpp"

#endif
