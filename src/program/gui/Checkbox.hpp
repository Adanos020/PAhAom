/**
 * @file src/program/gui/Checkbox.hpp
 * @author Adam 'Adanos' GÄ…sior
 * Used library: SFML
 */

#ifndef GUI_CHECKBOX_HPP
#define GUI_CHECKBOX_HPP

#include "Component.hpp"
#include "Image.hpp"
#include "Text.hpp"

namespace rr
{

    class Checkbox : public Component
    {
    private: sf::RectangleShape m_body;
             Image              m_image;
             Text               m_text;
             bool               m_checked;
             bool               m_held;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Draws the ckeckbox on the screen.
             ////////////////////////////////////////////////////////////////////////
     virtual void draw(sf::RenderTarget&, sf::RenderStates) const override;

    public:  ////////////////////////////////////////////////////////////////////////
             /// \brief Regular constructor.
             ////////////////////////////////////////////////////////////////////////
             Checkbox(sf::Vector2f pos, sf::String txt, int chsize, sf::Color = sf::Color(110, 110, 110, 128));

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the checkbox checked or not, depending on the value of
             /// the given argument.
             ////////////////////////////////////////////////////////////////////////
             void check(bool b);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the checkbox's body's position.
             ////////////////////////////////////////////////////////////////////////
     virtual void setPosition(sf::Vector2f) override;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the checkbox's body's position.
             ////////////////////////////////////////////////////////////////////////
     virtual sf::Vector2f getPosition() const override { return m_body.getPosition(); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the checkbox's body's size.
             ////////////////////////////////////////////////////////////////////////
     virtual void setSize(sf::Vector2f) override {}

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the checkbox's body's size.
             ////////////////////////////////////////////////////////////////////////
     virtual sf::Vector2f getSize() const override { return m_body.getSize(); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the string of the text displayed next to the checkbox.
             ////////////////////////////////////////////////////////////////////////
             void setText(sf::String s) { m_text.setString(s); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the text displayed next to the checkbox.
             ////////////////////////////////////////////////////////////////////////
             Text getText() const { return m_text; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the checkbox is touched by a mouse cursor.
             ////////////////////////////////////////////////////////////////////////
             bool containsMouseCursor(sf::RenderWindow&);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the checkbox is clicked.
             ////////////////////////////////////////////////////////////////////////
             bool isPressed(sf::RenderWindow&, sf::Event&);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Method telling if the checkbox is checked.
             ////////////////////////////////////////////////////////////////////////
             bool isChecked() const { return m_checked; }
    };

}

#endif // GUI_CHECKBOX_HPP
