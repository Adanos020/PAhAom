/**
 * @file src/program/gui/Button.hpp
 * @author Adam 'Adanos' GÄ…sior
 * Used library: SFML 2.3.2
 */

#ifndef GUI_BUTTON_HPP
#define GUI_BUTTON_HPP

#include "Component.hpp"
#include "Image.hpp"
#include "Text.hpp"

namespace rr {

    class Button : public Component {
    private: sf::RectangleShape body_;
             Image              image_;
             Text               text_;
             bool               held_;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Draws the button on the screen.
             ////////////////////////////////////////////////////////////////////////
     virtual void draw(sf::RenderTarget&, sf::RenderStates) const override;

    public:  ////////////////////////////////////////////////////////////////////////
             /// \brief Regular constructor.
             ///
             /// \param color the color of the text displayed on the button
             ////////////////////////////////////////////////////////////////////////
             Button(sf::Vector2f position = sf::Vector2f(0, 0), sf::String = "", unsigned chsize = 30, sf::Color = sf::Color::White);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the string of the text displayed on the button.
             ////////////////////////////////////////////////////////////////////////
             void setText(sf::String);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the text displayed on the button.
             ////////////////////////////////////////////////////////////////////////
             Text getText() const { return text_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the button is touched by a mouse cursor.
             ////////////////////////////////////////////////////////////////////////
             bool containsMouseCursor(sf::RenderWindow&);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the button is clicked.
             ////////////////////////////////////////////////////////////////////////
             bool isPressed(sf::RenderWindow&, sf::Event&);

             ////////////////////////////////////////////////////////////////////////
             /// \brief Tells if the button is being held.
             ////////////////////////////////////////////////////////////////////////
             bool isHeld() const { return held_; }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the button's body's position.
             ////////////////////////////////////////////////////////////////////////
     virtual void setPosition(sf::Vector2f) override;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the button's body's position.
             ////////////////////////////////////////////////////////////////////////
     virtual sf::Vector2f getPosition() const override { return body_.getPosition(); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the button's body's size.
             ////////////////////////////////////////////////////////////////////////
     virtual void setSize(sf::Vector2f size) override { body_.setSize(size); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the button's body's size.
             ////////////////////////////////////////////////////////////////////////
     virtual sf::Vector2f getSize() const override { return body_.getSize(); }
    };

}

#endif // GUI_BUTTON_HPP
