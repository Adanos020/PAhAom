/**
 * @file src/program/gui/Bar.hpp
 * @author Adam 'Adanos' GÄ…sior
 * Used library: SFML
 */

#ifndef GUI_BAR_HPP
#define GUI_BAR_HPP

#include "Component.hpp"

namespace rr
{

    class Bar : public Component
    {
    private: sf::RectangleShape m_border;
             sf::RectangleShape m_bar;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Draws the bar on the screen.
             ////////////////////////////////////////////////////////////////////////
     virtual void draw(sf::RenderTarget&, sf::RenderStates) const override;
    
    public:  enum Plain
             {
                 HORIZONTAL,
                 VERTICAL
             };

             ////////////////////////////////////////////////////////////////////////
             /// \brief Regular constructor.
             ///
             /// \param plain the plain in which the bar is situated; the possible
             /// values are:
             /// - HORIZONTAL
             /// - VERTICAL
             /// \param color the color of the bar, not the border
             ////////////////////////////////////////////////////////////////////////
             Bar(Plain = Plain::HORIZONTAL, int max_length = 0, sf::Color = sf::Color::White, sf::Vector2f pos = sf::Vector2f(0, 0));

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the bar's body's position.
             ////////////////////////////////////////////////////////////////////////
             void setPosition(sf::Vector2f) override;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the bar's body's position.
             ////////////////////////////////////////////////////////////////////////
             sf::Vector2f getPosition() const override { return m_border.getPosition(); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the bar's body's size.
             ////////////////////////////////////////////////////////////////////////
             void setSize(sf::Vector2f) override;

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the bar's body's size.
             ////////////////////////////////////////////////////////////////////////
             sf::Vector2f getSize() const override { return m_border.getSize(); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the bar's fill color.
             ////////////////////////////////////////////////////////////////////////
             void setFillColor(sf::Color c) { m_bar.setFillColor(c); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the bar's fill color.
             ////////////////////////////////////////////////////////////////////////
             sf::Color getFillColor() const { return m_bar.getFillColor(); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the bar's outline color.
             ////////////////////////////////////////////////////////////////////////
             void setOutlineColor(sf::Color c) { m_border.setOutlineColor(c); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Returns the bar's outline color.
             ////////////////////////////////////////////////////////////////////////
             sf::Color getOutlineColor() const { return m_border.getOutlineColor(); }

             ////////////////////////////////////////////////////////////////////////
             /// \brief Sets the bar's display value.
             ////////////////////////////////////////////////////////////////////////
             void setValue(sf::Vector2f);
    };

}

#endif // GUI_BAR_HPP
